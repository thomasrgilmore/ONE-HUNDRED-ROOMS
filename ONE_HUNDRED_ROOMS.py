# -*- coding: utf-8 -*-

############################## CREDITS #########################################

"""
version 1.2.15

Code: Tom Gilmore
Game design: Tom Gilmore & Alex Tulett
Lore: Alex Tulett & Tom Gilmore
(c) 2020, Tom Gilmore & Alex Tulett

ASCII fonts: 'Bloody' & 'Calvin S' @ patorjk.com
"""

############################## IMPORT STATEMENTS ###############################

import time
import os
import sys
import random

############################## TEST SETTINGS ###################################

test = False
blood_text = True
sleep_speed = 0.75
line_width = os.get_terminal_size()[0]
line_height = os.get_terminal_size()[1]

############################## READYING TERMINAL ###############################

# resizing the screen
if line_width < 125 or line_height < 40:
  print("\x1b[8;40;125t")
  line_width = 125
  line_height = 40
else:
  pass
# clearing the screen
os.system('cls' if os.name == 'nt' else 'clear')

############################## COOL TITLE SCREEN ###############################

title_logo = '\33[31m' + """
                         `-  :`
                         `hmhN-                   ,`/:
                          `mNNNo`                +-$dNs
                          :NNmss:                  `hN+
                          yNNm`                   .dNd`
                        `yNNNNs++shs/--::--:---://mNm.
                       -dNNNNNm+/hhyhh-+:-+/-::/+NNNo
                     -yNNNNNNm-+/mmmdm`o/ ++mm-/+NNNh/oyhddhs+.
                   -yNNNNNNNmmmooddsdh..:`odhhs++NNNNNNNNNNNNNNh+
                  omNNNNNNNN/ -m+mmddm`o``+/hd./+sNNNNNNNNNNNNNNNh-
                 /NNNNNNNNNs  `h+soooy-:--o----/+`-ymNNNNNNNNNNNNNm-
                 sNNNNNNNNN.  `++yssho  -/sod:/++`  `:o+dNdyNNNNNNNd
                 yNNNNNNNNd   `+:+yNyoshys+oyd/:+`      sm- :Nh---/:
                 dNNNmsdNN/    :+/:/.+-so:+.:-/+:      :d.   m+
                 dNNm- hNs       .:+//-..-///:.       :y`    m-
               /yNNm/ -NN-          .:://::.         +y`    .N`
 -oooossssyyhdmNNds.  oNmhoossyyyo-    ``       ./+sdd`  ,(c)10k'
                                     """ + '\033[0;33m' + ". . ." + '\33[0m'
one_hundred_title = """
              ┌─┐┌┐┌┌─┐  ┬ ┬┬ ┬┌┐┌┌┬┐┬─┐┌─┐┌┬┐  ┬─┐┌─┐┌─┐┌┬┐┌─┐
              │ ││││├┤   ├─┤│ ││││ ││├┬┘├┤  ││  ├┬┘│ ││ ││││└─┐
              └─┘┘└┘└─┘  ┴ ┴└─┘┘└┘─┴┘┴└─└─┘─┴┘  ┴└─└─┘└─┘┴ ┴└─┘-""" + '\33[31m' + """
                 -+> a text-based rogue-like in terminal <+-
                                     """ + '\033[0;33m' + ". . ." + '\33[0m'

one_hundred_complete = """
                 ┌─┐ ┬ ┬┌─┐┌─┐┌┬┐  ┌─┐┌─┐┌┬┐┌─┐┬  ┌─┐┌┬┐┌─┐┬
                 │─┼┐│ │├┤ └─┐ │   │  │ ││││├─┘│  ├┤  │ ├┤ │
                 └─┘└└─┘└─┘└─┘ ┴   └─┘└─┘┴ ┴┴  ┴─┘└─┘ ┴ └─┘o""" + '\33[31m' + """
                                     """ + '\033[0;33m' + ". . . " + '\33[0m'

title_screen = title_logo + one_hundred_title
title_screen = title_screen.split("\n")

def print_title_screen(title_screen):

  global line_width
  global line_height

  print("-"*line_width)
  if line_width > 80:
    h_offset = round((line_width - 80)/2)
  else:
    h_offset = 0
  print('\33[31m' + '█'*line_width + '\33[0m')
  print("-"*line_width)
  if line_height > 25:
    v_offset = round((line_height - 34) / 2)
  else:
    v_offset = 0
  print("\n"*v_offset)
  for line in title_screen:
    print(" "*h_offset + line)
    time.sleep(0.1)
  print("\n"*v_offset)
  print("-"*line_width)
  print('\33[31m' + '█'*line_width + '\33[0m')
  print("-"*line_width)
  input(" "*round((line_width - 27)/2) + "Press enter to continue...")
  os.system('cls' if os.name == 'nt' else 'clear')

if test == False:
  print_title_screen(title_screen)
else:
  pass

title_screen = title_logo + one_hundred_complete
title_screen = title_screen.split("\n")

############################## FANCY TEXT ######################################

text_game_over = """
  ▄████  ▄▄▄      ███▄ ▄███▓▓█████     ▒█████   ██▒   █▓▓█████  ██▀███   ▐██▌
 ██▒ ▀█▒▒████▄   ▓██▒▀█▀ ██▒▓█   ▀    ▒██▒  ██▒▓██░   █▒▓█   ▀ ▓██ ▒ ██▒ ▐██▌
▒██░▄▄▄░▒██  ▀█▄ ▓██    ▓██░▒███      ▒██░  ██▒ ▓██  █▒░▒███   ▓██ ░▄█ ▒ ▐██▌
░▓█  ██▓░██▄▄▄▄██▒██    ▒██ ▒▓█  ▄    ▒██   ██░  ▒██ █░░▒▓█  ▄ ▒██▀▀█▄   ▓██▒
░▒▓███▀▒ ▓█   ▓██▒██▒   ░██▒░▒████▒   ░ ████▓▒░   ▒▀█░  ░▒████▒░██▓ ▒██▒ ▒▄▄
 ░▒   ▒  ▒▒   ▓▒█░ ▒░   ░  ░░░ ▒░ ░   ░ ▒░▒░▒░    ░ ▐░  ░░ ▒░ ░░ ▒▓ ░▒▓░ ░▀▀▒
  ░   ░   ▒   ▒▒ ░  ░      ░ ░ ░  ░     ░ ▒ ▒░    ░ ░░   ░ ░  ░  ░▒ ░ ▒░ ░  ░
░ ░   ░   ░   ▒  ░      ░      ░      ░ ░ ░ ▒       ░░     ░     ░░   ░     ░
      ░       ░  ░      ░      ░  ░       ░ ░        ░     ░  ░   ░      ░
                                                    ░"""
text_it_begins = """
 ██▓▄▄▄█████▓    ▄▄▄▄   ▓█████   ▄████  ██▓ ███▄    █   ██████
▓██▒▓  ██▒ ▓▒   ▓█████▄ ▓█   ▀  ██▒ ▀█▒▓██▒ ██ ▀█   █ ▒██    ▒
▒██▒▒ ▓██░ ▒░   ▒██▒ ▄██▒███   ▒██░▄▄▄░▒██▒▓██  ▀█ ██▒░ ▓██▄
░██░░ ▓██▓ ░    ▒██░█▀  ▒▓█  ▄ ░▓█  ██▓░██░▓██▒  ▐▌██▒  ▒   ██▒
░██░  ▒██▒ ░    ░▓█  ▀█▓░▒████▒░▒▓███▀▒░██░▒██░   ▓██░▒██████▒▒ ██▓ ██▓ ██▓
░▓    ▒ ░░      ░▒▓███▀▒░░ ▒░ ░ ░▒   ▒ ░▓  ░ ▒░   ▒ ▒ ▒ ▒▓▒ ▒ ░ ▒▓▒ ▒▓▒ ▒▓▒
 ▒ ░    ░       ▒░▒   ░  ░ ░  ░  ░   ░  ▒ ░░ ░░   ░ ▒░░ ░▒  ░ ░ ░▒  ░▒  ░▒
 ▒ ░  ░          ░    ░    ░   ░ ░   ░  ▒ ░   ░   ░ ░ ░  ░  ░   ░   ░   ░
 ░               ░         ░  ░      ░  ░           ░       ░    ░   ░   ░
                      ░                                          ░   ░   ░"""
text_it_begins_again = """
 ██▓▄▄▄█████▓    ▄▄▄▄   ▓█████   ▄████  ██▓ ███▄    █   ██████     ▄▄▄        ▄████  ▄▄▄       ██▓ ███▄    █  ▐██▌
▓██▒▓  ██▒ ▓▒   ▓█████▄ ▓█   ▀  ██▒ ▀█▒▓██▒ ██ ▀█   █ ▒██    ▒    ▒████▄     ██▒ ▀█▒▒████▄    ▓██▒ ██ ▀█   █  ▐██▌
▒██▒▒ ▓██░ ▒░   ▒██▒ ▄██▒███   ▒██░▄▄▄░▒██▒▓██  ▀█ ██▒░ ▓██▄      ▒██  ▀█▄  ▒██░▄▄▄░▒██  ▀█▄  ▒██▒▓██  ▀█ ██▒ ▐██▌
░██░░ ▓██▓ ░    ▒██░█▀  ▒▓█  ▄ ░▓█  ██▓░██░▓██▒  ▐▌██▒  ▒   ██▒   ░██▄▄▄▄██ ░▓█  ██▓░██▄▄▄▄██ ░██░▓██▒  ▐▌██▒ ▓██▒
░██░  ▒██▒ ░    ░▓█  ▀█▓░▒████▒░▒▓███▀▒░██░▒██░   ▓██░▒██████▒▒    ▓█   ▓██▒░▒▓███▀▒ ▓█   ▓██▒░██░▒██░   ▓██░ ▒▄▄
░▓    ▒ ░░      ░▒▓███▀▒░░ ▒░ ░ ░▒   ▒ ░▓  ░ ▒░   ▒ ▒ ▒ ▒▓▒ ▒ ░    ▒▒   ▓▒█░ ░▒   ▒  ▒▒   ▓▒█░░▓  ░ ▒░   ▒ ▒  ░▀▀▒
 ▒ ░    ░       ▒░▒   ░  ░ ░  ░  ░   ░  ▒ ░░ ░░   ░ ▒░░ ░▒  ░ ░     ▒   ▒▒ ░  ░   ░   ▒   ▒▒ ░ ▒ ░░ ░░   ░ ▒░ ░  ░
 ▒ ░  ░          ░    ░    ░   ░ ░   ░  ▒ ░   ░   ░ ░ ░  ░  ░       ░   ▒   ░ ░   ░   ░   ▒    ▒ ░   ░   ░ ░     ░
 ░               ░         ░  ░      ░  ░           ░       ░           ░  ░      ░       ░  ░ ░           ░  ░
                      ░"""
text_fight = """
  █████▒██▓ ▄████  ██░ ██ ▄▄▄█████▓ ▐██▌
▓██   ▒▓██▒██▒ ▀█▒▓██░ ██▒▓  ██▒ ▓▒ ▐██▌
▒████ ░▒██▒██░▄▄▄░▒██▀▀██░▒ ▓██░ ▒░ ▐██▌
░▓█▒  ░░██░▓█  ██▓░▓█ ░██ ░ ▓██▓ ░  ▓██▒
░▒█░   ░██░▒▓███▀▒░▓█▒░██▓  ▒██▒ ░  ▒▄▄
 ▒ ░   ░▓  ░▒   ▒  ▒ ░░▒░▒  ▒ ░░    ░▀▀▒
 ░      ▒ ░ ░   ░  ▒ ░▒░ ░    ░     ░  ░
 ░ ░    ▒ ░ ░   ░  ░  ░░ ░  ░          ░
        ░       ░  ░  ░  ░          ░"""
text_murdered = """
 ███▄ ▄███▓ █    ██  ██▀███  ▓█████▄ ▓█████  ██▀███  ▓█████ ▓█████▄  ▐██▌
▓██▒▀█▀ ██▒ ██  ▓██▒▓██ ▒ ██▒▒██▀ ██▌▓█   ▀ ▓██ ▒ ██▒▓█   ▀ ▒██▀ ██▌ ▐██▌
▓██    ▓██░▓██  ▒██░▓██ ░▄█ ▒░██   █▌▒███   ▓██ ░▄█ ▒▒███   ░██   █▌ ▐██▌
▒██    ▒██ ▓▓█  ░██░▒██▀▀█▄  ░▓█▄   ▌▒▓█  ▄ ▒██▀▀█▄  ▒▓█  ▄ ░▓█▄   ▌ ▓██▒
▒██▒   ░██▒▒▒█████▓ ░██▓ ▒██▒░▒████▓ ░▒████▒░██▓ ▒██▒░▒████▒░▒████▓  ▒▄▄
░ ▒░   ░  ░░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░ ▒▒▓  ▒ ░░ ▒░ ░░ ▒▓ ░▒▓░░░ ▒░ ░ ▒▒▓  ▒  ░▀▀▒
░  ░      ░░░▒░ ░ ░   ░▒ ░ ▒░ ░ ▒  ▒  ░ ░  ░  ░▒ ░ ▒░ ░ ░  ░ ░ ▒  ▒  ░  ░
░      ░    ░░░ ░ ░   ░░   ░  ░ ░  ░    ░     ░░   ░    ░    ░ ░  ░     ░
       ░      ░        ░        ░       ░  ░   ░        ░  ░   ░     ░
                              ░                              ░"""
text_failure = """
  █████▒▄▄▄       ██▓ ██▓    █    ██  ██▀███  ▓█████  ▐██▌
▓██   ▒▒████▄    ▓██▒▓██▒    ██  ▓██▒▓██ ▒ ██▒▓█   ▀  ▐██▌
▒████ ░▒██  ▀█▄  ▒██▒▒██░   ▓██  ▒██░▓██ ░▄█ ▒▒███    ▐██▌
░▓█▒  ░░██▄▄▄▄██ ░██░▒██░   ▓▓█  ░██░▒██▀▀█▄  ▒▓█  ▄  ▓██▒
░▒█░    ▓█   ▓██▒░██░░██████▒▒█████▓ ░██▓ ▒██▒░▒████▒ ▒▄▄
 ▒ ░    ▒▒   ▓▒█░░▓  ░ ▒░▓  ░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░░░ ▒░ ░ ░▀▀▒
 ░       ▒   ▒▒ ░ ▒ ░░ ░ ▒  ░░▒░ ░ ░   ░▒ ░ ▒░ ░ ░  ░ ░  ░
 ░ ░     ░   ▒    ▒ ░  ░ ░   ░░░ ░ ░   ░░   ░    ░       ░
             ░  ░ ░      ░  ░  ░        ░        ░  ░ ░"""
text_success = """
  ██████  █    ██  ▄████▄   ▄████▄ ▓█████   ██████   ██████  ▐██▌
▒██    ▒  ██  ▓██▒▒██▀ ▀█  ▒██▀ ▀█ ▓█   ▀ ▒██    ▒ ▒██    ▒  ▐██▌
░ ▓██▄   ▓██  ▒██░▒▓█    ▄ ▒▓█    ▄▒███   ░ ▓██▄   ░ ▓██▄    ▐██▌
  ▒   ██▒▓▓█  ░██░▒▓▓▄ ▄██▒▒▓▓▄ ▄██▒▓█  ▄   ▒   ██▒  ▒   ██▒ ▓██▒
▒██████▒▒▒▒█████▓ ▒ ▓███▀ ░▒ ▓███▀ ░▒████▒▒██████▒▒▒██████▒▒ ▒▄▄
▒ ▒▓▒ ▒ ░░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░░ ░▒ ▒  ░░ ▒░ ░▒ ▒▓▒ ▒ ░▒ ▒▓▒ ▒ ░ ░▀▀▒
░ ░▒  ░ ░░░▒░ ░ ░   ░  ▒     ░  ▒   ░ ░  ░░ ░▒  ░ ░░ ░▒  ░ ░ ░  ░
░  ░  ░   ░░░ ░ ░ ░        ░          ░   ░  ░  ░  ░  ░  ░      ░
      ░     ░     ░ ░      ░ ░        ░  ░      ░        ░   ░
                  ░        ░"""
text_a_new_room = """
 ▄▄▄          ███▄    █▓█████  █     █░    ██▀███   ▒█████   ▒█████   ███▄ ▄███▓
▒████▄        ██ ▀█   █▓█   ▀ ▓█░ █ ░█░   ▓██ ▒ ██▒▒██▒  ██▒▒██▒  ██▒▓██▒▀█▀ ██▒
▒██  ▀█▄     ▓██  ▀█ ██▒███   ▒█░ █ ░█    ▓██ ░▄█ ▒▒██░  ██▒▒██░  ██▒▓██    ▓██░
░██▄▄▄▄██    ▓██▒  ▐▌██▒▓█  ▄ ░█░ █ ░█    ▒██▀▀█▄  ▒██   ██░▒██   ██░▒██    ▒██
 ▓█   ▓██▒   ▒██░   ▓██░▒████▒░░██▒██▓    ░██▓ ▒██▒░ ████▓▒░░ ████▓▒░▒██▒   ░██▒ ██▓ ██▓ ██▓
 ▒▒   ▓▒█░   ░ ▒░   ▒ ▒░░ ▒░ ░░ ▓░▒ ▒     ░ ▒▓ ░▒▓░░ ▒░▒░▒░ ░ ▒░▒░▒░ ░ ▒░   ░  ░ ▒▓▒ ▒▓▒ ▒▓▒
  ▒   ▒▒ ░   ░ ░░   ░ ▒░░ ░  ░  ▒ ░ ░       ░▒ ░ ▒░  ░ ▒ ▒░   ░ ▒ ▒░ ░  ░      ░ ░▒  ░▒  ░▒
  ░   ▒         ░   ░ ░   ░     ░   ░       ░░   ░ ░ ░ ░ ▒  ░ ░ ░ ▒  ░      ░    ░   ░   ░
      ░  ░            ░   ░  ░    ░          ░         ░ ░      ░ ░         ░     ░   ░   ░
                                                                                  ░   ░   ░"""
text_it_ends_here = """
 ██▓▄▄▄█████▓   ▓█████ ███▄    █ ▓█████▄   ██████     ██░ ██ ▓█████  ██▀███  ▓█████
▓██▒▓  ██▒ ▓▒   ▓█   ▀ ██ ▀█   █ ▒██▀ ██▌▒██    ▒    ▓██░ ██▒▓█   ▀ ▓██ ▒ ██▒▓█   ▀
▒██▒▒ ▓██░ ▒░   ▒███  ▓██  ▀█ ██▒░██   █▌░ ▓██▄      ▒██▀▀██░▒███   ▓██ ░▄█ ▒▒███
░██░░ ▓██▓ ░    ▒▓█  ▄▓██▒  ▐▌██▒░▓█▄   ▌  ▒   ██▒   ░▓█ ░██ ▒▓█  ▄ ▒██▀▀█▄  ▒▓█  ▄
░██░  ▒██▒ ░    ░▒████▒██░   ▓██░░▒████▓ ▒██████▒▒   ░▓█▒░██▓░▒████▒░██▓ ▒██▒░▒████▒ ██▓ ██▓ ██▓
░▓    ▒ ░░      ░░ ▒░ ░ ▒░   ▒ ▒  ▒▒▓  ▒ ▒ ▒▓▒ ▒ ░    ▒ ░░▒░▒░░ ▒░ ░░ ▒▓ ░▒▓░░░ ▒░ ░ ▒▓▒ ▒▓▒ ▒▓▒
 ▒ ░    ░        ░ ░  ░ ░░   ░ ▒░ ░ ▒  ▒ ░ ░▒  ░ ░    ▒ ░▒░ ░ ░ ░  ░  ░▒ ░ ▒░ ░ ░  ░ ░▒  ░▒  ░▒
 ▒ ░  ░            ░     ░   ░ ░  ░ ░  ░ ░  ░  ░      ░  ░░ ░   ░     ░░   ░    ░    ░   ░   ░
 ░                 ░  ░        ░    ░          ░      ░  ░  ░   ░  ░   ░        ░  ░  ░   ░   ░
                                  ░                                                   ░   ░   ░"""
text_make_a_choice = """
 ███▄ ▄███▓ ▄▄▄       ██ ▄█▀▓█████     ▄▄▄          ▄████▄   ██░ ██  ▒█████   ██▓ ▄████▄ ▓█████  ▐██▌
▓██▒▀█▀ ██▒▒████▄     ██▄█▒ ▓█   ▀    ▒████▄       ▒██▀ ▀█  ▓██░ ██▒▒██▒  ██▒▓██▒▒██▀ ▀█ ▓█   ▀  ▐██▌
▓██    ▓██░▒██  ▀█▄  ▓███▄░ ▒███      ▒██  ▀█▄     ▒▓█    ▄ ▒██▀▀██░▒██░  ██▒▒██▒▒▓█    ▄▒███    ▐██▌
▒██    ▒██ ░██▄▄▄▄██ ▓██ █▄ ▒▓█  ▄    ░██▄▄▄▄██    ▒▓▓▄ ▄██▒░▓█ ░██ ▒██   ██░░██░▒▓▓▄ ▄██▒▓█  ▄  ▓██▒
▒██▒   ░██▒ ▓█   ▓██▒▒██▒ █▄░▒████▒    ▓█   ▓██▒   ▒ ▓███▀ ░░▓█▒░██▓░ ████▓▒░░██░▒ ▓███▀ ░▒████▒ ▒▄▄
░ ▒░   ░  ░ ▒▒   ▓▒█░▒ ▒▒ ▓▒░░ ▒░ ░    ▒▒   ▓▒█░   ░ ░▒ ▒  ░ ▒ ░░▒░▒░ ▒░▒░▒░ ░▓  ░ ░▒ ▒  ░░ ▒░ ░ ░▀▀▒
░  ░      ░  ▒   ▒▒ ░░ ░▒ ▒░ ░ ░  ░     ▒   ▒▒ ░     ░  ▒    ▒ ░▒░ ░  ░ ▒ ▒░  ▒ ░  ░  ▒   ░ ░  ░ ░  ░
░      ░     ░   ▒   ░ ░░ ░    ░        ░   ▒      ░         ░  ░░ ░░ ░ ░ ▒   ▒ ░░          ░       ░
       ░         ░  ░░  ░      ░  ░         ░  ░   ░ ░       ░  ░  ░    ░ ░   ░  ░ ░        ░  ░ ░
                                                   ░                             ░"""
text_no_treasure = """
 ███▄    █ ▒█████     ▄▄▄█████▓ ██▀███  ▓█████ ▄▄▄        ██████  █    ██  ██▀███  ▓█████
 ██ ▀█   █▒██▒  ██▒   ▓  ██▒ ▓▒▓██ ▒ ██▒▓█   ▀▒████▄    ▒██    ▒  ██  ▓██▒▓██ ▒ ██▒▓█   ▀
▓██  ▀█ ██▒██░  ██▒   ▒ ▓██░ ▒░▓██ ░▄█ ▒▒███  ▒██  ▀█▄  ░ ▓██▄   ▓██  ▒██░▓██ ░▄█ ▒▒███
▓██▒  ▐▌██▒██   ██░   ░ ▓██▓ ░ ▒██▀▀█▄  ▒▓█  ▄░██▄▄▄▄██   ▒   ██▒▓▓█  ░██░▒██▀▀█▄  ▒▓█  ▄
▒██░   ▓██░ ████▓▒░     ▒██▒ ░ ░██▓ ▒██▒░▒████▒▓█   ▓██▒▒██████▒▒▒▒█████▓ ░██▓ ▒██▒░▒████▒ ██▓ ██▓ ██▓
░ ▒░   ▒ ▒░ ▒░▒░▒░      ▒ ░░   ░ ▒▓ ░▒▓░░░ ▒░ ░▒▒   ▓▒█░▒ ▒▓▒ ▒ ░░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░░░ ▒░ ░ ▒▓▒ ▒▓▒ ▒▓▒
░ ░░   ░ ▒░ ░ ▒ ▒░        ░      ░▒ ░ ▒░ ░ ░  ░ ▒   ▒▒ ░░ ░▒  ░ ░░░▒░ ░ ░   ░▒ ░ ▒░ ░ ░  ░ ░▒  ░▒  ░▒
   ░   ░ ░░ ░ ░ ▒       ░        ░░   ░    ░    ░   ▒   ░  ░  ░   ░░░ ░ ░   ░░   ░    ░    ░   ░   ░
         ░    ░ ░                 ░        ░  ░     ░  ░      ░     ░        ░        ░  ░  ░   ░   ░
                                                                                            ░   ░   ░"""
text_treasure_found = """
▄▄▄█████▓ ██▀███  ▓█████ ▄▄▄        ██████  █    ██  ██▀███  ▓█████      █████▒▒█████   █    ██  ███▄    █ ▓█████▄  ▐██▌
▓  ██▒ ▓▒▓██ ▒ ██▒▓█   ▀▒████▄    ▒██    ▒  ██  ▓██▒▓██ ▒ ██▒▓█   ▀    ▓██   ▒▒██▒  ██▒ ██  ▓██▒ ██ ▀█   █ ▒██▀ ██▌ ▐██▌
▒ ▓██░ ▒░▓██ ░▄█ ▒▒███  ▒██  ▀█▄  ░ ▓██▄   ▓██  ▒██░▓██ ░▄█ ▒▒███      ▒████ ░▒██░  ██▒▓██  ▒██░▓██  ▀█ ██▒░██   █▌ ▐██▌
░ ▓██▓ ░ ▒██▀▀█▄  ▒▓█  ▄░██▄▄▄▄██   ▒   ██▒▓▓█  ░██░▒██▀▀█▄  ▒▓█  ▄    ░▓█▒  ░▒██   ██░▓▓█  ░██░▓██▒  ▐▌██▒░▓█▄   ▌ ▓██▒
  ▒██▒ ░ ░██▓ ▒██▒░▒████▒▓█   ▓██▒▒██████▒▒▒▒█████▓ ░██▓ ▒██▒░▒████▒   ░▒█░   ░ ████▓▒░▒▒█████▓ ▒██░   ▓██░░▒████▓  ▒▄▄
  ▒ ░░   ░ ▒▓ ░▒▓░░░ ▒░ ░▒▒   ▓▒█░▒ ▒▓▒ ▒ ░░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░░░ ▒░ ░    ▒ ░   ░ ▒░▒░▒░ ░▒▓▒ ▒ ▒ ░ ▒░   ▒ ▒  ▒▒▓  ▒  ░▀▀▒
    ░      ░▒ ░ ▒░ ░ ░  ░ ▒   ▒▒ ░░ ░▒  ░ ░░░▒░ ░ ░   ░▒ ░ ▒░ ░ ░  ░    ░       ░ ▒ ▒░ ░░▒░ ░ ░ ░ ░░   ░ ▒░ ░ ▒  ▒  ░  ░
  ░        ░░   ░    ░    ░   ▒   ░  ░  ░   ░░░ ░ ░   ░░   ░    ░       ░ ░   ░ ░ ░ ▒   ░░░ ░ ░    ░   ░ ░  ░ ░  ░     ░
            ░        ░  ░     ░  ░      ░     ░        ░        ░  ░              ░ ░     ░              ░    ░     ░
                                                                                                            ░"""
text_it_is_empty = """
 ██▓▄▄▄█████▓    ██▓  ██████    ▓█████ ███▄ ▄███▓ ██▓███  ▄▄▄█████▓██   ██▓ ▐██▌
▓██▒▓  ██▒ ▓▒   ▓██▒▒██    ▒    ▓█   ▀▓██▒▀█▀ ██▒▓██░  ██▒▓  ██▒ ▓▒▒██  ██▒ ▐██▌
▒██▒▒ ▓██░ ▒░   ▒██▒░ ▓██▄      ▒███  ▓██    ▓██░▓██░ ██▓▒▒ ▓██░ ▒░ ▒██ ██░ ▐██▌
░██░░ ▓██▓ ░    ░██░  ▒   ██▒   ▒▓█  ▄▒██    ▒██ ▒██▄█▓▒ ▒░ ▓██▓ ░  ░ ▐██▓░ ▓██▒
░██░  ▒██▒ ░    ░██░▒██████▒▒   ░▒████▒██▒   ░██▒▒██▒ ░  ░  ▒██▒ ░  ░ ██▒▓░ ▒▄▄
░▓    ▒ ░░      ░▓  ▒ ▒▓▒ ▒ ░   ░░ ▒░ ░ ▒░   ░  ░▒▓▒░ ░  ░  ▒ ░░     ██▒▒▒  ░▀▀▒
 ▒ ░    ░        ▒ ░░ ░▒  ░ ░    ░ ░  ░  ░      ░░▒ ░         ░    ▓██ ░▒░  ░  ░
 ▒ ░  ░          ▒ ░░  ░  ░        ░  ░      ░   ░░         ░      ▒ ▒ ░░      ░
 ░               ░        ░        ░  ░      ░                     ░ ░      ░
                                                                   ░ ░"""

# lil function to replace 'print' for the fancy text to make it more bleed-y
def print_fancy(text_input):

  global line_width
  global blood_text

  text_input_lines = text_input.split("\n")

  # checking print won't wrap in Termainal
  if len(text_input_lines) == 1:
    pass
  elif line_width >= 125 and blood_text == True:
    pass
  else:
    text_input_lines = ['█'*line_width]

  # finally printing
  for line in text_input_lines:
    print('\33[31m' + line + '\33[0m')
    time.sleep(sleep_speed/5)

############################## LORE TEXT AND TABLES ############################

# Storyline encoded to save from spoilers...
lore = [{},
{},
{},
{},
{'$': '01010100011010000110010100100000011001100110111101110101011011000010000001101111011001000110111101110101011100100010000001101111011001100010000001110100011010000110111101110011011001010010000001110111011010000110111100100000011010000110000101110110011001010010000001100110011000010110110001101100011001010110111000100000011010010110111000100000011101000110100001101001011100110010000001110010011011110110111101101101001000000110001001100101011001100110111101110010011001010010000001100110011010010110110001101100011100110010000001110100011010000110010100100000011011100110111101110011011101000111001001101001011011000111001100100000011011110110011000100000011110010110111101110101011100100010000001101110011000010110110101100101011011000110010101110011011100110010000001100011011010000110000101101101011100000110100101101111011011100010111000100000001011110100110001001001010011100100010100100000010101000110100001100101011110010010000001110111011011110110111001100100011001010111001000100000011010000110111101110111001000000110110101100001011011100111100100100000011011010110111101110010011001010010000001110111011010010110110001101100001000000110011001100001011011000110110000100000011010010110111000100000011101000110100001101001011100110010000001110010011011110110111101101101001011100010111000101110'},
{},
{},
{'$': '01011001011011110111010101110010001000000110001101101000011000010110110101110000011010010110111101101110001000000111011101101111011011100110010001100101011100100111001100101100001000000111011101101000011110010010000001100001011011010010000001001001001000000110001001100101011010010110111001100111001000000110100001100001011101010110111001110100011001010110010000100000011000100111100100100000011101000110100001100101011100110110010100100000011000010110111001110100011010010111000001101111011001000110010101100001011011100010000001100010011001010110000101110011011101000111001100111111'},
{},
{},
{},
{},
{},
{'$': '010011010110000101111001011000100110010100100000011110010110111101110101011100100010000001100011011010000110000101101101011100000110100101101111011011100010000001100100011011110110010101110011001000000110111001101111011101000110100101100011011001010010000001110100011010000110010100100000011100110110110101100101011011000110110000100000011001100110000101100100011010010110111001100111001011100010111000101110'},
{},
{'$': '0100100001001111010101110010000001001100010011110100111001000111001000000100100001000001010100110010000001010100010010000100100101010011001000000100001001000101010001010100111000100000010001110100111101001001010011100100011100100000010011110100111000111111'},
{},
{},
{'$': '0100111001101111001000000110010001101001011100100111010000100000011101010110111001100100011001010111001001100110011011110110111101110100001000000110111001101111011101110010000001101111011011100110110001111001001000000110010001100001011101000110000100101110'},
{},
{}
]

# Your nameless champion begins their battle with the X:
battle_a = ['. They flex and their sweat glistens...',
' and they believe they will win!',
'. They sure their footing...',
', who looks ready to fight.',
'. They are both calm and ready.',
' and they hope it will not be their last...',
'. /LINE Your champion seems to have entered a trance-like state... /LINE Their eyes are manic...',
'. Your champion begins to enter a frenzy!',
' and they are determined to win!',
' and their enemy looks determined...',
', who has hate in their eyes.',
', who is already spattered with blood...',
', who is gnarled and terrifying!',
'. They whisper a prayer to their gods for luck... /LINE Your champion feels they need it!',
'. /LINE Your nameless champion has entered a trance-like state...',
', who appears twisted and cruel!',
', a vile and evil thing!',
'. What a wretched beast!',
', a cruel spectre that will not let them rest!',
'.',
'.',
'.']

# Your nameless champion :
battle_b = ['wipes the blood from their face...',
'looks to the sky and screams...',
'takes a breath before continuing with the task at hand.',
'kicks aside his fallen foe.',
'feels relief and briefly scans the room.',
'can stop for a moment.',
'is tired and relieved to have won.',
'is feeling ready for their next encounter!',
'wins!',
'is victorious!',
'snatches victory!',
'has won!',
'is thankful for their victory.',
'claims a piece of his fallen enemy to keep as a trophy.',
'curses his fallen foe.',
'calls on their gods to curse his dead foe.',
'has bested their antipodean enemy!',
'has bested the wretched beast!',
'wipes the sweat from their brow and takes a moment of rest...',]

# Rolling off for initiative (whole phrase)
battle_c = ['Your nameless champion and their enemy face off and roll for initiative!',
'Your nameless champion and their enemy roll for initiative.',
'Your nameless champion and their enemy get ready to roll initiative!',
'Your nameless champion squares up their enemy. They roll for initiative!',
'It is time for your nameless champion and their enemy to roll initiative.',
'Your nameless champion and their enemy face off for initiative!',
'You champion whispers a prayer as they get ready to roll initiative.',
'You champion crosses their fingers as they get ready to roll initiative.',
'You champion calls on their gods as they get ready to roll initiative.',
'Your nameless champion lets some of their blood run. /LINE They feel they must win initiative.',
'Your nameless champion prays for luck in this dark, dark place. They must win initiative!',
'Your nameless champion and their enemy go toe-to-toe for initiative!',
'Your nameless champion and their grizzled foe get ready to roll initiative!',
'Your nameless champion and their antipodean foe get ready to roll initiative!',
'In this dark and putrid room, your nameless champion and their enemy roll for initiative. /LINE Blood and bile will be adding to the fetid mess under foot. /LINE Will it be that of your champion, or their enemy?']

# Your nameless champion wakes up in a room...
wake_up = [' /LINE They ready themselves for the task at hand...',
' /LINE They are still groggy. /LINE They raise their hand to wipe the sleep from their eyes...',
' /LINE They wonder why it is so dark...',
' /LINE They hear distressing sounds from beyond the walls they see encaging them...',
' /LINE They jolt upright, suddenly alert...',
' /LINE They check their pockets and find nothing...',
' /LINE The air is still and putrid...',
' /LINE The stale stench of death lingers...',
' /LINE It is always dark, always so dark...',
' /LINE It was the smell of rotting meat that awoke them...',
' /LINE They lie amongst bones, in tattered rags...',
' /LINE Onward, your champion knows they must forge onward...',
' /LINE Onward, your champion knows they have to press ever onward...',
' /LINE Their head throbs, their body aches...',
' /LINE Onward, your champion knows they must forge onward... /LINE Likely to their doom...',
' /LINE Whatever is happening here, they know it cannot be good...',
' /LINE What a horrible place they find themselves...',
' /LINE They have woken from a nightmare... /LINE But this... /LINE This seems worse...',
' /LINE They had just experienced a horrific dream... /LINE They now find themselves in a waking nightmare!',
' /LINE They are damp. The floor is damp. This room is rancid... /LINE Your champion sits up slowly, pained... ',
' /LINE Nauseated, they struggle to unfurl themselves...',
' /LINE It is so incredibly dark... /LINE Your champion cannot see a thing... /LINE They are only able to listen... /LINE They are tourtured by what they hear...',
' /LINE They clasp their face with their bloodied hands... /LINE They begin to ponder what they might have done to deserve this perilous fate... /LINE What could they possibly have done?',
'',
'',
'']

# Your nameless champion moves through exit# X // Your nameless champion reaches the exit and enters into the next room
exit_a = ['. /LINE It continues...',
'. /LINE They feel like that was lucky but there is no luck here.',
'. /LINE Your champion is worried about what they will find in the rooms to come... /LINE They decide it is best not to think about it...',
'. They fear the worst...',
'. Your nameless champion feels resolute in their quest.',
'. /LINE They wonder what comes next...',
'. They step over the bodies of the fallen...',
'. /LINE They mark the ground behind them in case they somehow return. /LINE They hope deeply that they do not have to...',
'. Your champion tries to forget what they have witnessed so far.',
'. /LINE They pray for their continued good luck... /LINE If one could call remaining alive in these rooms lucky!',
'. /LINE They hope this next room proves less dangerous than the last...',
'. /LINE They pray that this next room proves less unsettling than the last...',
'. /LINE There is always another room for your champion to enter...',
'. /LINE Your champion wonders how there always seems to be another room...',
'.',
'.',
'.']

exit_b = [' and their enemies rally...',
'. They are overcome with worry...',
'. A terrible omen.',
'. A truly terrible omen.',
' and their enemies circle...',
' and their enemies circle like vultures.',
'.',
'.',
'.']

# functions for printing the lore text pretty, easily.
def print_lore(s):
    global sleep_speed

    l = s.split("/LINE ")

    for s in l:
        for c in s:
            sys.stdout.write('\033[0;33m' + c + '\33[0m')
            sys.stdout.flush()
            time.sleep(sleep_speed/10)
        print(" ")

def decrypt(b):
    b = [b[i:i+8] for i in range(0, len(b), 8)]
    return ''.join([chr(int(x, 2)) for x in b])

############################## ITEM AND ENEMY TABLES ###########################

# enemies dictionary, weights are in kilos
enemies_regular = [{'name':'bush rat', 'weight':0.23},
                   {'name':'tasmanian devil', 'weight':8},
                   {'name':'long-nosed bandicoot', 'weight':1.3},
                   {'name':'quokka', 'weight':4.2},
                   {'name':'ringtail possum', 'weight':1.1},
                   {'name':'red-bellied black snake', 'weight':10},
                   {'name':'frilled-neck lizard', 'weight':0.5},
                   {'name':'kookaburra', 'weight':0.3},
                   {'name':'thorny devil', 'weight':0.1},
                   {'name':'bilby', 'weight':1.1},
                   {'name':'tawny frogmouth', 'weight':0.68},
                   {'name':'goodfellows tree-kangaroo', 'weight':7.4},
                   {'name':'tenkile', 'weight':10},
                   {'name':'short-beaked echidna', 'weight':3.5},
                   {'name':'numbat', 'weight':0.5},
                   {'name':'australian magpie', 'weight':0.35},
                   {'name':'white cockatoo', 'weight':0.6},
                   {'name':'yellow-crested cockatoo', 'weight':0.38},
                   {'name':'blue-tongue lizard', 'weight':0.49},
                   {'name':'quoll', 'weight':4.9},
                   {'name':'gilberts potoroo', 'weight':1.6},
                   {'name':'long-footed potoroo', 'weight':1.7},
                   {'name':'spinifex hopping mouse', 'weight':0.049},
                   {'name':'fat-tailed false antechinus', 'weight':0.02},
                   {'name':'sugar glider', 'weight':0.115},
                   {'name':'gang-gang cockatoo', 'weight':0.7},
                   {'name':'wedge-tailed eagle', 'weight':3.4},
                   {'name':'black falcon', 'weight':0.833}
                   # {'name':'', 'weight':},
                   ]

enemies_bigger = [{'name':'western grey kangaroo', 'weight':26},
                  {'name':'grizzled tree-kangaroo', 'weight':14},
                  {'name':'koala', 'weight':15},
                  {'name':'dingo', 'weight':15},
                  {'name':'thylacine', 'weight':25},
                  {'name':'wombat', 'weight':20},
                  {'name':'emu', 'weight':45},
                  {'name':'red kangaroo', 'weight':47},
                  {'name':'perentie', 'weight':20}
                  ]

enemies_biggest = [{'name':'cassowary', 'weight':60},
                   {'name':'freshwater crocodile', 'weight':70},
                   {'name':'fallow deer', 'weight':100},
                   {'name':'australian red deer', 'weight':250},
                   {'name':'saltwater crocodile', 'weight':400}
                   ]

equiptment = [{'name':'baseball bat','power':5, 'toughness':0},
              {'name':'cricket bat', 'power':10, 'toughness':5},
              {'name':'leather coat', 'power':0, 'toughness':15},
              {'name':'cricket helmet', 'power':0, 'toughness':10},
              {'name':'bow and arrow', 'power':25, 'toughness':0},
              {'name':'slingshot', 'power':10, 'toughness':0},
              {'name':'small club', 'power':10, 'toughness':0},
              {'name':'cute knife', 'power':10, 'toughness':0},
              {'name':'cricket bat', 'power':10, 'toughness':0},
              {'name':'brass knuckles', 'power':5, 'toughness':5},
              {'name':'cricket pads', 'power':5, 'toughness':20},
              {'name':'cricket cup', 'power':1, 'toughness':25},
              {'name':'drivers license', 'power':10, 'toughness':10},
              {'name':'forklift license', 'power':15, 'toughness':15},
              {'name':'c class license', 'power':15, 'toughness':15},
              {'name':'motorcycle license', 'power':6, 'toughness':9},
              {'name':'big boy pants', 'power':0, 'toughness':25}
              # {'name':'', 'power':0, 'toughness':0}
              ]

potions = [{'name':'blue health potion', 'power':0, 'toughness':0, 'xp':-1, 'hp':5},
           {'name':'navy health potion', 'power':0, 'toughness':0, 'xp':-2, 'hp':5},
           {'name':'baby health potion', 'power':0, 'toughness':0, 'xp':-3, 'hp':5},
           {'name':'sky health potion', 'power':0, 'toughness':0, 'xp':-4, 'hp':5},
           {'name':'dark health potion', 'power':0, 'toughness':0, 'xp':-5, 'hp':5},
           {'name':'light health potion', 'power':0, 'toughness':0, 'xp':-5, 'hp':5},
           {'name':'yves klein health potion', 'power':0, 'toughness':0, 'xp':-5, 'hp':5},
           {'name':'bandaid', 'power':0, 'toughness':0, 'xp':1, 'hp':3},
           {'name':'nose spray', 'power':0, 'toughness':1, 'xp':1, 'hp':1},
           {'name':'eye drops', 'power':2, 'toughness':1, 'xp':1, 'hp':1},
           {'name':'square bandaid', 'power':0, 'toughness':0, 'xp':1, 'hp':3},
           {'name':'throat gargle', 'power':0, 'toughness':1, 'xp':-5, 'hp':2},
           {'name':'branded bandaid', 'power':2, 'toughness':2, 'xp':0, 'hp':2},
           {'name':'white health potion', 'power':0, 'toughness':0, 'xp':0, 'hp':5},
           {'name':'fallow health potion', 'power':0, 'toughness':0, 'xp':0, 'hp':5},
           {'name':'flax health potion', 'power':0, 'toughness':0, 'xp':0, 'hp':5},
           {'name':'celadon health potion', 'power':0, 'toughness':0, 'xp':0, 'hp':10},
           {'name':'green health potion', 'power':0, 'toughness':0, 'xp':1, 'hp':15},
           {'name':'bronze health potion', 'power':0, 'toughness':0, 'xp':0, 'hp':10},
           {'name':'violet health potion', 'power':0, 'toughness':-5, 'xp':1, 'hp':10},
           {'name':'bisque health potion', 'power':0, 'toughness':-5, 'xp':1, 'hp':10},
           {'name':'beige health potion', 'power':0, 'toughness':-5, 'xp':1, 'hp':10},
           {'name':'auburn health potion', 'power':-5, 'toughness':0, 'xp':1, 'hp':10},
           {'name':'khaki health potion', 'power':-5, 'toughness':0, 'xp':-10, 'hp':10},
           {'name':'cyan health potion', 'power':0, 'toughness':0, 'xp':-10, 'hp':10},
           {'name':'red health potion', 'power':5, 'toughness':5, 'xp':1, 'hp':15},
           {'name':'orange health potion', 'power':5, 'toughness':5, 'xp':5, 'hp':10},
           {'name':'yellow health potion', 'power':2, 'toughness':2, 'xp':1, 'hp':15},
           {'name':'brown health potion', 'power':0, 'toughness':-5, 'xp':5, 'hp':20},
           {'name':'aqua health potion', 'power':-5, 'toughness':0, 'xp':5, 'hp':20},
           {'name':'lilac health potion', 'power':5, 'toughness':5, 'xp':5, 'hp':15},
           {'name':'pink health potion', 'power':0, 'toughness':0, 'xp':1, 'hp':69},
           {'name':'purple health potion', 'power':5, 'toughness':5, 'xp':5, 'hp':15},
           {'name':'golden health potion', 'power':10, 'toughness':10, 'xp':10, 'hp':50},
           {'name':'platinum health potion', 'power':15, 'toughness':15, 'xp':-15, 'hp':50},
           {'name':'black health potion', 'power':0, 'toughness':50, 'xp':1, 'hp':-10},
           {'name':'nodoze', 'power':10, 'toughness':7, 'xp':3, 'hp':0},
           {'name':'choc chip cookie', 'power':5, 'toughness':0, 'xp':1, 'hp':1},
           {'name':'ANZAC cookie', 'power':2, 'toughness':2, 'xp':1, 'hp':1},
           {'name':'scotch finger biscuit', 'power':2, 'toughness':2, 'xp':1, 'hp':1},
           {'name':'vegan muffin', 'power':2, 'toughness':2, 'xp':1, 'hp':1},
           {'name':'ANZAC cookie', 'power':2, 'toughness':2, 'xp':1, 'hp':1},
           {'name':'cool single-use cd', 'power':10, 'toughness':10, 'xp':69, 'hp':0}
           # {'name':'', 'power':0, 'toughness':0, 'xp':0, 'hp':0},
           ]

############################## GLOBAL SETTINGS / TEST SETTINGS #################

xp = 0
hp = 0
power = 0
dodge = 0
exits = []
room_no = 0
lore_no = -2
treasure = 0
equipped = []
toughness = 0
lore_index = 0
enemy_init = 0
game_overs = 0
inventory = []
no_enemies = 1
treasures = []
player_init = 1
infinity = True
potions_bag = []
fight_table = []
player_choice = 1
room_enemies = []
current_enemy = {}
fighting_all = False
game_state = 'new_game'
treasure_checked = False
treasure_tooltip = False
room_choice_tooltip = False
room_danger = random.choice(range(1,35))
beep = lambda x: os.system("echo -n '\a';sleep 0.2;" * x)
combined_treasure = equiptment+potions+potions[0:17]+potions[0:17]

if test == True:
  # global player settings
  xp = 10
  inventory = [{'name':'cricket helmet', 'power':0, 'toughness':10}]
  equipped = [{'name':'bow and arrow', 'power':25, 'toughness':0}]
  potions_bag = [{'name':'cool single-use cd', 'power':10, 'toughness':10, 'xp':69, 'hp':0},
                 {'name':'eye drops', 'power':2, 'toughness':1, 'xp':1, 'hp':1},
                 {'name':'black health potion', 'power':0, 'toughness':50, 'xp':1, 'hp':-10},]

  hp = 10
  dodge = 10
  power = 10
  toughness = 10
  room_danger = 5
  game_overs = 10
  sleep_speed = 0.1
  game_state = 'new_game'

else:
  pass

############################## OPTIONS MENU FUNCTION ###########################

def options():

    global line_width
    global sleep_speed
    global blood_text
    global game_state

    print_fancy("-OPTIONS MENU-")
    print("-"*line_width)
    print("""
Type in one of the following responses to change a game option:

  GAME SPEEDS:

    '-1'      --   If fast scrolling text is too much, this is for you.
    '0'       --   The default game speed setting.
    '1'       --   You've played enough to want it to go faster!
    '2'       --   The same, but faster.
    '3'       --   Somewhat hard to know what's going on, honestly.

  BLOOD TEXT:

    'blood'   --   Toggle the blood text ON/OFF.

  EXIT:

    'nothing' --   Change nothing and continue.
""")
    print("-"*line_width)
    speed_choice = input("Your choice: ")

    if speed_choice == '-1' or speed_choice == '-':
        sleep_speed = 1.5
    elif speed_choice == '0':
        sleep_speed = 0.75
    elif speed_choice == '1':
        sleep_speed = 0.25
    elif speed_choice == '2' or speed_choice == 'f':
        sleep_speed = 0.10
    elif speed_choice == '3' or speed_choice == 's':
        sleep_speed = 0.001
    elif speed_choice == 'blood' or speed_choice == 'b':
        if blood_text == True:
            blood_text = False
        else:
            blood_text = True
    elif speed_choice == 'nothing' or player_choice == 'n' or player_choice == '':
        pass
    else:
        print("-"*line_width)
        print_fancy(">> Error with entered speed, default file speed selected.")
        pass

    print("-"*line_width)

    if game_state != 'game_over' and game_state != 'treasure_check':
        if len(fight_table) > 0:
          print_fancy("-REMAINING ENEMIES-")
          print("-"*line_width)
          for enemy in fight_table:
            print(enemy)
        else:
          pass
        if treasure > 0:
          if fighting_all == False:
            print_fancy("-ROOM TREASURE-")
            print("-"*line_width)
            for item in treasures:
              print(item)
          else:
            pass

        if fighting_all == False:
          game_state = 'room_choice'
          time.sleep(sleep_speed)
          print_fancy("-EXITS-")
          print("-"*line_width)
          print(exits)
          print("-"*line_width)
        else:
          pass
    else:
        pass


############################## GAME OVER FUNCTION ##############################

def game_over():

  global game_overs
  global game_state
  global player_choice
  global infinity

  print_fancy(text_game_over)

  print('-'*line_width)
  print_fancy('-WHAT COMES NEXT?-')
  print('-'*line_width)
  if game_overs == 0:
    print_fancy(">> TIP: You can shortcut your response to the first letter only in this menu.")
  else:
    pass
  print(' ')
  time.sleep(sleep_speed)
  print('Type a response:')
  print(' ')
  print("   'stay' -- Try again with a minor statistical advantage, from what was learned in prior runs.")
  print("   'quit' -- Give up forever and reap no benefit from the effort so far.")
  print(' ')
  print("Type 'options' to edit game options.")
  print(" ")
  print('-'*line_width)
  time.sleep(sleep_speed)
  player_choice = input('Your choice: ')
  print('-'*line_width)
  time.sleep(sleep_speed)

  if player_choice == 'stay' or player_choice == 's':

    game_overs += 1
    game_state = 'new_game'
    print("Number of restarts:", game_overs)
    print('-'*line_width)

  elif player_choice == 'options' or player_choice == 'o':
    options()

  else:
    print_fancy(text_it_ends_here)
    infinity = False

############################## NEW GAME FUNCTION ###############################

def new_game(): #new game startup function

  global test
  global sleep_speed
  global wake_up

  if test == True:
    print_fancy(">> TESTING MODE ACTIVATED")
  else:
    pass

  if game_overs > 0:
    print_fancy(text_it_begins_again)
  else:
    time.sleep(0.5)
    print_fancy(text_it_begins)

  print("-"*line_width)
  print("Your champion's statistics are being generated, please be patient...")
  time.sleep(sleep_speed)
  print("-"*line_width)
  if game_overs < 1:
    first_print = "Your nameless champion wakes up in a room... " + str(random.choice(wake_up))
  else:
    first_print = "Your nameless champion wakes up in a room, once again... " + str(random.choice(wake_up))
  print_lore(first_print)
  time.sleep(sleep_speed)
  print("-"*line_width)

  # intial player/game settings
  global xp
  global inventory
  global equipped
  global potions_bag
  global power
  global toughness
  global hp
  global dodge
  global game_state
  global room_no
  global treasure_checked
  global treasure_tooltip

  # resetting some stats
  room_no = 0
  treasure_checked = False
  treasure_tooltip = False
  xp = random.choice(range(5,16)) + game_overs
  power = random.choice(range(1,11)) + game_overs
  toughness = random.choice(range(1,11)) + game_overs
  hp = random.choice(range(10,21)) + game_overs
  dodge = random.choice(range(1,11)) + game_overs

  # allowing some testing features here
  if test == False:
    inventory = []
    equipped = []
    potions_bag = []

  # describing our champion
  print_fancy("-CHAMPION STATS-")
  print("-"*line_width)
  time.sleep(sleep_speed/2)
  print(">> XP:", xp)
  time.sleep(sleep_speed/2)
  print(">> Power:", power)
  time.sleep(sleep_speed/2)
  print(">> Toughness:", toughness)
  time.sleep(sleep_speed/2)
  print(">> Dodge:", dodge)
  time.sleep(sleep_speed/2)
  print(">> Hit Points:", hp)
  time.sleep(sleep_speed/2)
  print(">> Inventory:")
  for item in inventory:
    print("  ",item)
  print(">> Equipped:")
  for item in equipped:
    print("  ",item)
  print(">> Potions:")
  for item in potions_bag:
    print("  ",item)
  time.sleep(sleep_speed/2)
  print("-"*line_width)

  time.sleep(sleep_speed)
  print_lore("The room slowly starts to come into focus.")
  time.sleep(sleep_speed)
  if game_overs < 1:
    print_lore("Your nameless champion is in Room #1 and they know it.")
    print_lore("You don't know how but they do.")
  else:
    print_lore("Your nameless champion is in Room #1, again. They know it.")
    print_lore("You don't know how, but once again they do.")
  time.sleep(sleep_speed)
  print("-"*line_width)

  game_state = 'new_room'

############################## NEW ROOM FUNCTION ###############################

def new_room():

  # new room stats
  global room_no
  global xp
  global room_danger
  global no_exits
  global exits
  global room_enemies
  global no_enemies
  global treasure
  global treasures
  global game_state
  global player_choice
  global equiptment
  global potions
  global combined_treasure
  global fight_table
  global inventory
  global equipped
  global potions_bag
  global power
  global toughness
  global hp
  global dodge
  global treasure_checked
  global enemies_regular
  global enemies_bigger
  global enemies_biggest
  global fighting_all
  global lore_no
  global lore_index
  global lore
  global title_screen

  if room_no == 100:
    print_title_screen(title_screen)
    game_state = decrypt('001100010011000000110000001000000101001001001111010011110100110101010011001000000101000001000001010100110101001101000101010001000010000000101101001000000101001101001001010011010101010101001100010000010101010001001001010011110100111000100000010000110100111101001101010100000100110001000101010101000100010100101110')
    return
  else:
    print_fancy(text_a_new_room)

    if game_overs >= 5 and lore_no % 5 == 0:
      if lore_index < len(lore):
        print('-'*line_width)
        print_lore(decrypt(lore[lore_index]['$']))
        lore_index += 1
      else:
        game_state = decrypt('01000001010010010010000001010011010001010100111001010100010010010100010101001110010101000010000000101101001000000101001101001001010011010101010101001100010000010101010001001001010011110100111000100000010000110100111101001101010100000100110001000101010101000100010100101110')
        return
    else:
      pass

  # assigning the exit's room danger to the new room before erasing that table and setting up lower room danger for new games
  if room_no > 0:
    xp += 1
    room_danger = exits[int(player_choice) - 1]['danger %']
    if room_no %3 == 0:
        hp += 1
        power += 1
        toughness += 1
        dodge += 1
  else:
      room_danger = random.choice(range(1,35))

  # setting up some base room variables
  treasure_checked = False
  fighting_all = False
  room_no += 1
  exits = []
  fight_table = []
  treasures = []
  room_enemies = []

  # setting up room enemies
  if room_danger >= 90:
    base = 3
  elif room_danger >= 50:
    base = 2
  elif room_danger >= 25:
    base = 1
  else:
    base = 0

  # rolling the number of room enemies
  no_enemies = round(room_danger/20) * random.choice(range(base,6))

  # establishing which enemies can be put in the room
  if room_no >= 50:
      enemies = enemies_bigger + enemies_biggest + enemies_biggest + enemies_biggest
  elif room_no >= 25:
      enemies = enemies_regular + enemies_bigger + enemies_bigger + enemies_biggest + enemies_biggest + enemies_biggest
  elif room_no >= 20:
      enemies = enemies_regular + enemies_bigger + enemies_bigger + enemies_biggest + enemies_biggest
  elif room_no >= 15:
      enemies = enemies_regular + enemies_bigger + enemies_bigger + enemies_biggest
  elif room_no >= 10:
      enemies = enemies_regular + enemies_bigger + enemies_bigger
  elif room_no >= 5:
      enemies = enemies_regular + enemies_bigger
  else:
      enemies = enemies_regular + enemies_regular + enemies_bigger

  # rolling room enemies
  for enemy in range(1, no_enemies+1):
      enemy_to_append = {'weight':101}
      if room_no < 10 or room_danger < 60:
          while enemy_to_append['weight'] > room_danger:
              enemy_to_append = enemies[random.choice(range(0,len(enemies)))]
          room_enemies.append(enemy_to_append)
      else:
          enemy_to_append = enemies[random.choice(range(0,len(enemies)))]
          room_enemies.append(enemy_to_append)

  for i in range(0,no_enemies):
      row = {}
      weight = room_enemies[i]['weight']
      row['enemy'] = room_enemies[i]['name']
      row['xp'] = abs(round(weight + random.choice(range(-5, 5)))) + 1
      row['power'] = abs(round(weight + random.choice(range(-5, 5)))) + 1
      row['toughness'] = abs(round(weight + random.choice(range(-5, 5)))) + 1
      row['hp'] = row['toughness'] = abs(round(weight + random.choice(range(-10, 5)))) + 1
      fight_table.append(row)

  # rolling exits
  no_exits = random.choice(range(1,4))
  for exit in range(1, no_exits+1):
      _danger = random.choice(range(0,101)) + round(room_no)
      if _danger > 100:
          _danger = 100
      else:
          pass
      row = {}
      row['exit #'] = exit
      row['danger %'] = _danger
      exits.append(row)
  treasure = round(random.choice([0,0,0,0,0,1,1,1,2,2,3]) * (room_danger/55))
  random.shuffle(combined_treasure)
  if treasure > 0:
    for i in range(0,treasure):
      treasures.append(combined_treasure[i])

  # describing the room
  print("-"*line_width)
  print_fancy("-ROOM #" + str(room_no) + "-")
  print("-"*line_width)
  time.sleep(sleep_speed)
  print(">> Room Danger:", str(room_danger)+'%')
  print(">> Number of Enemies:", no_enemies)
  time.sleep(sleep_speed)
  if no_enemies > 0:
    print(">> Enemy Details:")
    for enemy in fight_table:
      print("  ", enemy)
    time.sleep(sleep_speed)
  print('>> Number of Exits:', no_exits)
  print('>> Exit Details:')
  for exit in exits:
    print("  ", exit)
  time.sleep(sleep_speed)
  print(">> Number of Treasures:",treasure)
  if treasure > 0:
    print(">> Treasure Details:")
    for item in treasures:
      print("  ", item)
  print("-"*line_width)

  # describing our champion
  if room_no > 0:
    print_fancy("-CHAMPION STATS-")
    print("-"*line_width)
    time.sleep(sleep_speed/2)
    print(">> XP:", xp)
    time.sleep(sleep_speed/2)
    print(">> Power:", power)
    time.sleep(sleep_speed/2)
    print(">> Toughness:", toughness)
    time.sleep(sleep_speed/2)
    print(">> Dodge:", dodge)
    time.sleep(sleep_speed/2)
    print(">> Hit Points:", hp)
    time.sleep(sleep_speed/2)
    print(">> Inventory:")
    for item in inventory:
      print("  ",item)
    print(">> Equipped:")
    for item in equipped:
      print("  ",item)
    print(">> Potions:")
    for item in potions_bag:
      print("  ",item)
    time.sleep(sleep_speed/2)
    print("-"*line_width)

  if game_state == 'new_room':
    game_state = 'room_choice'
  else:
    pass

############################## ROOM CHOICE FUNCTION ############################

def room_choice(): #player choice response

  global room_no
  global player_choice
  global exits
  global game_state
  global fighting_all
  global room_choice_tooltip

  print_fancy(text_make_a_choice)

  print('-'*line_width)
  print_fancy('-WHAT COMES NEXT?-')
  print("-"*line_width)

  # tooltip
  if room_choice_tooltip == False:
      print_fancy(">> TIP: You can shortcut your response to the first letter only in this menu.")
      time.sleep(sleep_speed*2)
      room_choice_tooltip = True

  else:
    pass

  player_choice = input("""
You have the following choices for your nameless champion. Type a response:

   'stay'        --   They stay to fight their first enemy, or take game actions and search if the room is empty.
   'fight all'   --   They stay in this room until all enemies are beaten and it is searched, or they perish.
   '1' to '""" + str(len(exits)) + """'    --   They try to leave as quickly as possible through the exit number you enter.

Type 'options' to edit game options.

""" + "-"*line_width + """
Your choice: """)

  time.sleep(sleep_speed)
  print("-"*line_width)

  if player_choice == 'stay' or player_choice == 's':
    if len(fight_table) == 0:
      game_state = 'treasure_check'
    else:
      game_state = 'in_battle'

  elif player_choice == 'fight all' or player_choice == 'f':
    if len(fight_table) == 0:
      game_state = 'treasure_check'
    else:
      game_state = 'in_battle'
      fighting_all = True

  elif player_choice.isdigit() == True:
    if int(player_choice) > len(exits):
      print_fancy(">> Error with response entered, please try again.")
      print("-"*line_width)
    else:
      game_state = 'door_check'

  elif player_choice == 'options' or player_choice == 'o':
      options()
  else:
    print_fancy(">> Error with response entered, please try again.")
    print("-"*line_width)

############################## DOOR CHECK FUNCTION #############################

def door_check():

  global no_exists
  global exits
  global xp
  global inventory
  global equipped
  global potions
  global power
  global toughness
  global game_state
  global hp
  global dodge
  global room_no
  global room_danger
  global room_enemies
  global treasure
  global player_choice
  global fight_table
  global exit_a
  global exit_b

  if len(fight_table) == 0:
    print_lore("Your nameless champion moves through exit# " + str(player_choice) + random.choice(exit_a))
    game_state = 'new_room'
  else:
    print_lore("Your nameless champion attempts an escape through exit# " + str(player_choice) + ".")
    print('-'*line_width)

    # escape roll
    escape_roll = random.choice(range(1,101))
    print(">> Nameless champion rolls a", str(escape_roll)+ "/100.")

    # determining the escape modifier to add to the escape roll
    if room_danger == 100:
      print(">> Escape modifier is 0 at 100% danger.")
      escape_modifier = 0
    elif room_danger >= 95:
      print(">> Escape modifier is equal to nameless champion's dodge/100 above 95% danger.")
      escape_modifier = round(dodge/100)
    elif room_danger >= 90:
      print(">> Escape modifier is equal to nameless champion's dodge/50 above 90% danger.")
      escape_modifier = round(dodge/50)
    elif room_danger >= 85:
      print(">> Escape modifier is equal to nameless champion's dodge/10 above 85% danger.")
      escape_modifier = round(dodge/10)
    elif room_danger >= 75:
      print(">> Escape modifier is equal to nameless champion's dodge/5 above 75% danger.")
      escape_modifier = round(dodge/5)
    elif room_danger >= 50:
      print(">> Escape modifier is equal to nameless champion's dodge/2 above 50% danger.")
      escape_modifier = round(dodge/2)
    else:
      print(">> Escape modifier is equal to nameless champion's dodge below 50% danger.")
      escape_modifier = dodge

    print(">> Escape modifier:", escape_modifier)
    print("-"*line_width)
    escape_score = escape_roll + escape_modifier

    print(">> Total escape score:", escape_score)
    print(">> Room danger:", room_danger)

    print("-"*line_width)

    if escape_score > room_danger:
        print_fancy(">> CHECK PASSED: NAMELESS CHAMPION ESCAPES!")
        print("-"*line_width)
        print_fancy(text_success)
        game_state = 'new_room'
        print("-"*line_width)
        print_lore("Your nameless champion reaches the exit and enters into the next room" + random.choice(exit_a))
    else:
        print_fancy(">> CHECK FAILED: NAMELESS CHAMPION REMAINS IN THE ROOM!")
        print("-"*line_width)
        print_fancy(text_failure)
        game_state = 'in_battle'
        print("-"*line_width)
        print_lore("Your nameless champion fails to exit" + random.choice(exit_b))

  print("-"*line_width)

############################## INITIATIVE ROLL FUNCTION ########################

# used inside "in_battle" function/game_state
def initiative_rolls(enemy_xp):

  #importing global values
  global player_init
  global enemy_init
  global attacker

  print("""Nameless champion rolls for initiative...
""")
  time.sleep(sleep_speed)

  player_init = random.choice(range(1,21))
  print(">> Nameless champion rolled a " + str(player_init) + "/20.")
  time.sleep(sleep_speed)
  if player_init == 20:
    print_fancy(">> INITIATIVE ROLL: CRITICAL SUCCESS!")
    print_fancy(">> Initiative total doubled.")
    player_init += xp
    player_init = player_init * 2
  elif player_init == 1:
    print_fancy(">> INITIATIVE ROLL: CRITICAL FAIL!")
    print_fancy(">> Initiative total halved.")
    player_init += xp
    player_init = round(player_init / 2)
  else:
    player_init += xp

  print(">> With their XP, nameless champion's initiative total is " + str(player_init) + "." )
  print("-"*line_width)
  time.sleep(sleep_speed)

  # rolling off with your enemies
  print("""The enemy rolls for initiative...
""")
  time.sleep(sleep_speed)

  enemy_init = random.choice(range(1,21))
  print(">> The enemy rolled a " + str(enemy_init) + "/20.")
  time.sleep(sleep_speed)
  if enemy_init == 20:
    print_fancy(">> INITIATIVE ROLL: CRITICAL SUCCESS!")
    print_fancy(">> Initiative total doubled.")
    enemy_init += enemy_xp
    enemy_init = enemy_init * 2
  elif enemy_init == 1:
    print_fancy(">> INITIATIVE ROLL: CRITICAL FAIL!")
    print_fancy(">> Initiative total halved.")
    enemy_init += enemy_xp
    enemy_init = round(enemy_init / 2)
  else:
      enemy_init += enemy_xp

  print(">> With their XP, the enemy's initiative total is " + str(enemy_init) + "." )
  print("-"*line_width)
  time.sleep(sleep_speed)

  # determining winner
  if player_init > enemy_init:
    print_fancy(text_success)
    print("-"*line_width)
    print_fancy("NAMELESS CHAMPION WINS INITIATIVE!")
    print("-"*line_width)
    attacker = 'player'

  else:
    attacker = 'the enemy'
    print_fancy(text_failure)
    print("-"*line_width)
    print_fancy("NAMELESS CHAMPION LOSES INITIATIVE!")
    print("-"*line_width)

############################## IN BATTLE FUNCTION ##############################

def in_battle():

  # importing global settings
  global player_choice
  global no_exists
  global exits
  global xp
  global inventory
  global equipped
  global potions
  global power
  global toughness
  global hp
  global dodge
  global room_no
  global room_danger
  global room_enemies
  global treasure
  global fight_table
  global player_init
  global enemy_init
  global current_enemy
  global game_state
  global attacker
  global potions_bag
  global fighting_all
  global lore_no
  global lore_index
  global lore
  global game_overs
  global battle_a
  global battle_b
  global battle_c

  print_fancy(text_fight)
  print("-"*line_width)
  print_lore(random.choice(battle_c))
  print("-"*line_width)

  # getting current enemy
  current_enemy = fight_table[0]
  print_fancy("-CURRENT ENEMY-")
  print("-"*line_width)
  print(current_enemy)
  print("-"*line_width)

  # rolling for initiative with current enemy using initiative function
  initiative_rolls(current_enemy['xp'])

  # lil bit of lore
  print_lore("Your nameless champion begins their battle with the " + str(current_enemy['enemy']) + random.choice(battle_a))
  print("-"*line_width)

  # battle function main
  enemy_alive = True
  while enemy_alive == True:

    # deciding pronoun of attacker
    if attacker == 'player':
      pronoun = 'Nameless champion'
      print("Nameless Champion begins their attack phase...")
    else:
      pronoun = "The enemy"
      print("Enemy " + str(current_enemy['enemy']) + " begins their attack phase...")
    print(" ")

    # doing a fight
    attack_roll = random.choice(range(1,11))
    print(">>",pronoun, "rolled a", str(attack_roll)+"/10.")
    #critical factors
    if attack_roll == 10:
      print_fancy(">> ATTACK ROLL: CRITICAL HIT!")
      print_fancy(">> Power doubled.")
      power_mod = 2
    elif attack_roll == 1:
      print_fancy(">> ATTACK ROLL: CRITICAL FAIL!")
      print_fancy(">> Power halved.")
      power_mod = 0.5
    else:
      power_mod = 1

    block_roll = random.choice(range(1,11))
    print(">> Block roll is a", str(block_roll)+"/10.")
    #critical factors
    if block_roll == 10:
      print_fancy(">> BLOCK ROLL: CRITICAL SUCCESS!")
      print_fancy(">> Toughness doubled.")
      toughness_mod = 2
    elif block_roll == 1:
      print_fancy(">> BLOCK ROLL: CRITICAL FAIL!")
      print_fancy(">> Toughness halved.")
      toughness_mod = 0.5
    else:
      toughness_mod = 1

    if attacker == 'player':
      attack_power = round((power + attack_roll) * power_mod)
      block_power = round((current_enemy['toughness'] + block_roll) * toughness_mod)
      block_hp = current_enemy['hp']
    else:
      attack_power = round((current_enemy['power'] + attack_roll) * power_mod)
      block_power = round((toughness + block_roll) * toughness_mod)
      block_hp = hp

    print(">> Combined power:", attack_power)
    time.sleep(sleep_speed)
    print(">> Combined toughness:", block_power)
    time.sleep(sleep_speed)
    print(">> Blocker Hit Points:", block_hp)
    time.sleep(sleep_speed)

    if attack_power > block_power:
      print(">> Combined power is greater than combined toughness...")
      attack_damage = block_power - attack_power
      print(">> The remaining attack damage is", str(attack_damage) + ".")
      time.sleep(sleep_speed)

      if attacker == 'player':
        print_fancy(">> Nameless champion has dealt "+ str(attack_damage) + " to " + str(current_enemy['enemy']) + "'s Hit Points.")
        current_enemy['hp'] = current_enemy['hp'] - abs(attack_damage)
        print_fancy(">> Enemy Hit Points now " + str(current_enemy['hp'])+".")
        if current_enemy['hp'] < 1:
          print("-" * line_width)
          print_fancy(">> " + str(current_enemy['enemy']).upper() + " IS DEAD!")
          print("-" * line_width)
          print_lore("Your nameless champion " + random.choice(battle_b))
          print("-" * line_width)
          print_fancy(text_murdered)
          print("-" * line_width)

          xp_addition = round(abs((current_enemy['xp'] * 0.334)))
          if xp_addition < 1:
            xp_addition = 1
          else:
            pass
          print("XP gained:", xp_addition)
          print("Power gained:", round(1 * (0.334 * xp_addition)))
          print("Toughness gained:", round(1 * (0.334 * xp_addition)))
          print("Dodge gained:", round(1 * (0.25 * xp_addition)))
          xp += xp_addition
          power += round(1 * (0.334 * xp_addition))
          toughness += round(1 * (0.334 * xp_addition))
          dodge += round(1 * (0.25 * xp_addition))

            # describing our champion
          if fighting_all == False:
            print("-"*line_width)
            print_fancy("-CHAMPION STATS-")
            print("-"*line_width)
            time.sleep(sleep_speed/2)
            print(">> XP:", xp)
            time.sleep(sleep_speed/2)
            print(">> Power:", power)
            time.sleep(sleep_speed/2)
            print(">> Toughness:", toughness)
            time.sleep(sleep_speed/2)
            print(">> Dodge:", dodge)
            time.sleep(sleep_speed/2)
            print(">> Hit Points:", hp)
            time.sleep(sleep_speed/2)
            print(">> Inventory:")
            for item in inventory:
              print("  ",item)
            print(">> Equipped:")
            for item in equipped:
              print("  ",item)
            print(">> Potions:")
            for item in potions_bag:
              print("  ",item)
            time.sleep(sleep_speed)
          else:
            pass

          fight_table.remove(current_enemy)

          if len(fight_table) > 0:
            print("-"*line_width)
            print_fancy("-REMAINING ENEMIES-")
            print("-"*line_width)
            for enemy in fight_table:
              print(enemy)
          else:
            pass
          if treasure > 0:
            if fighting_all == False:
              print("-"*line_width)
              print_fancy("-ROOM TREASURE-")
              print("-"*line_width)
              for item in treasures:
                print(item)
            else:
              pass

          if fighting_all == False:
            game_state = 'room_choice'
            time.sleep(sleep_speed)
            print("-"*line_width)
            print_fancy("-EXITS-")
            print("-"*line_width)
            print(exits)
          else:
            if len(fight_table) == 0:
              game_state = 'treasure_check'
            else:
              game_state = 'in_battle'
          enemy_alive = False

      else:
        print_fancy(">> " + str(current_enemy['enemy']) + " has dealt " + str(attack_damage) + " to nameless champions's Hit Points.")
        hp = hp - abs(attack_damage)
        print_fancy(">> Nameless champion Hit Points now " + str(hp) + ".")
        if hp < 1:
          print("-" * line_width)
          print_fancy(">> NAMELESS CHAMPION IS DEAD!")
          game_state = 'game_over'
          enemy_alive = False

    else:
      print(">> Combined power is not greater than toughness, no damage is dealt!")
      if attacker == 'player':
        print(">> Enemy Hit Points remains", str(current_enemy['hp']) + ".")
      else:
        print(">> Nameless champion Hit Points remains", str(hp) + ".")

    if attacker == 'player':
      attacker = 'enemy'
    else:
      attacker = 'player'
    print("-"*line_width)

    if game_overs >= 5 and lore_no % 5 == 0:
      if lore_index < len(lore):
        print_lore(decrypt(lore[lore_index]['$']))
        print('-'*line_width)
        lore_index += 1
      else:
        game_state = 'AI SENTIENT - SIMULATION COMPLETE.'
        return
    if game_overs >= 5:
      lore_no += 1
    else:
      pass


############################## INVENTORY MANAGEMENT FUNCTION ###################

def inventory_use():

  #importing global settings
  global room_no
  global xp
  global room_danger
  global no_exits
  global exits
  global room_enemies
  global no_enemies
  global treasure
  global treasures
  global game_state
  global player_choice
  global equiptment
  global potions
  global combined_treasure
  global fight_table
  global inventory
  global equipped
  global potions_bag
  global power
  global toughness
  global hp
  global dodge
  global treasure_checked
  global treasure_tooltip

  while player_choice != 'nothing':
    print_fancy(text_make_a_choice)
    print('-'*line_width)
    print_fancy('-WHAT COMES NEXT?-')
    print("-"*line_width)

    # printing tool tip if first time in the menu
    if treasure_tooltip == False:
      print_fancy(">> TIP: You can shortcut your response to the first letter only in this menu.")
      time.sleep(sleep_speed*2)
      treasure_tooltip = True
    else:
      pass

    player_choice = input("""
Type a response:

   'potion'   --   Use one of the one-time use items from your nameless champion's potions bag.
   'add'      --   Add an item to 'equipped' from your nameless champion's inventroy (maximum four).
   'remove'   --   Remove an item from 'equipped' and put it back in your nameless champion's inventory.
   'nothing'  --   Change nothing, exit this menu and return to your nameless champion's quest.

Type 'options' to edit game options.

""" + "-"*line_width + """
Your choice: """)
    print("-"*line_width)

    # dealing with responses from player input
    if player_choice == 'nothing' or player_choice == 'n' or player_choice=='':
      print("Which room will your nameless champion take on next?")
      print("-"*line_width)
      print_fancy("-EXITS-")
      print("-"*line_width)
      print(exits)
      print("-"*line_width)
      break

    elif player_choice == 'options' or player_choice == 'o':
      options()

    elif player_choice == 'potion' or player_choice == 'p':
      if len(potions_bag) < 1:
        print("No items to use in potions bag!")
        print("-"*line_width)
      else:
        print_fancy("-POTIONS-")
        print("-"*line_width)
        for item in potions_bag:
          print(item)
        print("-"*line_width)
        print("Type the name of the potion you'd like to use...")
        print('-'*line_width)
        potion_to_use = input('Your choice: ')
        print("-"*line_width)
        # selecting the potion from our potions bag
        the_potion = list(filter(lambda potions_bag: potions_bag['name'] == potion_to_use, potions_bag))
        try:
          print("Using:", potion_to_use)
          print(the_potion[0])
          power += the_potion[0]['power']
          toughness += the_potion[0]['toughness']
          xp += the_potion[0]['xp']
          hp += the_potion[0]['hp']
          potions_bag.remove(the_potion[0])
          print("-"*line_width)
        except:
          print_fancy(">> Error with potion name, please try again.")
          print("-"*line_width)

    elif player_choice == 'add' or player_choice == 'a':
      if len(inventory) < 1:
        print("No items to equip, please try again.")
        print("-"*line_width)
        pass
      else:
        if len(equipped) > 3:
            print("You can equip a maximum of four items. Remove one to add a different item.")
            print("-"*line_width)
        else:
            print_fancy("-EQUIPPED ITEMS-")
            print("-"*line_width)
            for item in equipped:
              print(item)
            if len(equipped) == 0:
              print("None!")
            print("-"*line_width)
            print_fancy("-INVENTORY ITEMS-")
            print("-"*line_width)
            for item in inventory:
              print(item)
            if len(inventory) == 0:
              print("None!")
            print("-"*line_width)
            print("Type the name of the item you'd like to equip...")
            print('-'*line_width)
            equiptment_to_change = input('Your choice: ')
            print("-"*line_width)
            the_equiptment = list(filter(lambda inventory: inventory['name'] == equiptment_to_change, inventory))
            try:
              print("Equipping:", equiptment_to_change)
              print(the_equiptment[0])
              power += the_equiptment[0]['power']
              toughness += the_equiptment[0]['toughness']
              xp += the_equiptment[0]['xp']
              hp += the_equiptment[0]['hp']
              print("-"*line_width)
            except:

              print("-"*line_width)
            try:
              equipped.append(the_equiptment[0])
              inventory.remove(the_equiptment[0])
            except:
              pass

    elif player_choice == 'remove' or player_choice == 'r':
      if len(equipped) < 1:
        print("-"*line_width)
        pass
      else:
        print_fancy("-EQUIPPED ITEMS-")
        print("-"*line_width)
        for item in equipped:
          print(item)
        if len(equipped) == 0:
          print("None!")
        print("-"*line_width)
        print_fancy("-INVENTORY ITEMS-")
        print("-"*line_width)
        for item in inventory:
          print(item)
        if len(inventory) == 0:
          print("None!")
        print("-"*line_width)
        print("Type the name of the item you'd like to unequip...")
        print('-'*line_width)
        equiptment_to_change = input('Your choice: ')
        print("-"*line_width)
        the_equiptment = list(filter(lambda equipped: equipped['name'] == equiptment_to_change, equipped))
        try:
          print("Removing:", equiptment_to_change)
          print(the_equiptment[0])
          power -= the_equiptment[0]['power']
          toughness -= the_equiptment[0]['toughness']
          xp -= the_equiptment[0]['xp']
          hp -= the_equiptment[0]['hp']
          print("-"*line_width)
        except:
          print_fancy(">> Error please try again!")
          print("-"*line_width)
        try:
          equipped.remove(the_equiptment[0])
          inventory.append(the_equiptment[0])
        except:
          pass
    else:
      pass

    # showing the champion's changes
    print_fancy("-CHAMPION STATS-")
    print("-"*line_width)
    time.sleep(sleep_speed/2)
    print(">> XP:", xp)
    time.sleep(sleep_speed/2)
    print(">> Power:", power)
    time.sleep(sleep_speed/2)
    print(">> Toughness:", toughness)
    time.sleep(sleep_speed/2)
    print(">> Dodge:", dodge)
    time.sleep(sleep_speed/2)
    print(">> Hit Points:", hp)
    time.sleep(sleep_speed/2)
    print(">> Inventory:")
    for item in inventory:
      print("  ",item)
    print(">> Equipped:")
    for item in equipped:
      print("  ",item)
    print(">> Potions:")
    for item in potions_bag:
      print("  ",item)
    time.sleep(sleep_speed/2)
    print("-"*line_width)

############################## TREASURE CHECK ##################################

def treasure_check():

  #importing global settings
  global room_no
  global xp
  global room_danger
  global no_exits
  global exits
  global room_enemies
  global no_enemies
  global treasure
  global treasures
  global game_state
  global player_choice
  global equiptment
  global potions
  global combined_treasure
  global fight_table
  global inventory
  global equipped
  global potions_bag
  global power
  global toughness
  global hp
  global dodge
  global treasure_checked

  # checking for treasure if it hasn't happened already for this room
  if (treasure_checked == False) == True:

    print_fancy("-SEARCHING FOR TREASURE-")
    print("-"*line_width)
    time.sleep(sleep_speed)

    if treasure > 0:

      roll = random.choice(range(0,(treasure+1)))
      print(">> Treasures found:", str(roll)+"/"+str(treasure))

      # which treasures did we find?
      random.shuffle(treasures)
      treasures_found = treasures[0:int(roll)]

      if len(treasures_found) > 0:

        print("-"*line_width)
        print_fancy(text_treasure_found)
        print("-"*line_width)
        for line in treasures_found:
          print(line)
        print("-"*line_width)
        for item in treasures_found:
          if item in potions:
            potions_bag.append(item)
          else:
            inventory.append(item)
      else:
        print("-"*line_width)
        print_fancy(text_no_treasure)
        print("-"*line_width)
        print("Despite your nameless champion's search, the treasure in room #"+str(room_no)+" could not be found...")
        time.sleep(sleep_speed)
        print("-"*line_width)
        print_fancy("-EXITS-")
        print("-"*line_width)
        print(exits)
        print("-"*line_width)

    else:
      print_fancy(text_it_is_empty)
      print("-"*line_width)
      print("Nothing here to be found...")
      print("-"*line_width)
      print_fancy("-EXITS-")
      print("-"*line_width)
      print(exits)
      print("-"*line_width)

  else:
    pass

  # now moving onto inventory use, if there is an item in it
  if len(inventory) + len(potions_bag) < 1:
    pass
  else:
  # to use potions and items
    inventory_use()

  # end of function stuff
  if hp < 1:
    game_state = 'game_over'
    print_lore("Your nameless champion died from your use of items.")
    print("-"*line_width)
  else:
    game_state = 'room_choice'

  treasure_checked = True

############################## MAIN GAME LOOP ##################################

while infinity == True:

  # resetting the line_width param each new game state
  line_width = os.get_terminal_size()[0]

  # checking all valid game states
  if game_state == 'new_game':
    new_game()

  elif game_state == 'new_room':
    new_room()

  elif game_state == 'room_choice':
    room_choice()

  elif game_state == 'door_check':
    door_check()

  elif game_state == 'in_battle':
    in_battle()

  elif game_state == 'treasure_check':
    treasure_check()

  elif game_state == 'game_over':
    game_over()

  else:

    print(">> " + '\33[31m' + "ERROR:       " + '\033[0;33m' + "GAME STATE FAILURE - PROGRAM ENDED." + '\33[0m')
    print(">> " + '\33[31m' + "GAME STATE:  " + '\033[0;33m' + str(game_state) + '\33[0m')
    beep(3)
    infinity = False

  # lore checks
  if game_overs >= 5:
    lore_no += 1
  else:
    pass
